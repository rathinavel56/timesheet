{"version":3,"sources":["webpack:///./src/app/users/users.component.html","webpack:///./src/app/api/services/role.service.ts","webpack:///./src/app/users/users-routing.module.ts","webpack:///./src/app/users/users.component.scss","webpack:///./src/app/users/users.component.ts","webpack:///./src/app/users/users.module.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["module.exports = \"<div [@routerTransition]>\\n  <app-page-header [heading]=\\\"'Users'\\\" [icon]=\\\"'fa-edit'\\\"></app-page-header>\\n  <form [formGroup]=\\\"updateForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label col-sm-2\\\">Employee Name</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <input type=\\\"text\\\" class=\\\"form-control input-underline input-lg\\\" formControlName=\\\"name\\\"\\n          placeholder=\\\"Enter Your Emp name\\\" [ngClass]=\\\"{ 'is-invalid': submitted && (updateForm.get('name').value.length === 0) }\\\">\\n        <div *ngIf=\\\"submitted && (updateForm.get('name').value.length === 0)\\\"\\n                            class=\\\"invalid-feedback-show\\\">\\n            Emp name is required\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label col-sm-2\\\">Shore Type</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <select class=\\\"form-control\\\" formControlName=\\\"shore_type\\\">\\n          <option *ngFor=\\\"let shoreType of shoreTypes\\\"\\n                                [value]=\\\"shoreType.id\\\">{{shoreType.name}}</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\" *ngIf=\\\"isAdmin\\\">\\n      <label class=\\\"control-label col-sm-2\\\">Role</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <select class=\\\"form-control\\\" formControlName=\\\"role_id\\\">\\n          <option *ngFor=\\\"let role of roles\\\" [value]=\\\"role._id\\\">{{ role.name }}</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label col-sm-2\\\" >Manager</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <select class=\\\"form-control\\\" formControlName=\\\"manager_id\\\">\\n          <option *ngFor=\\\"let manager of managers\\\" [value]=\\\"manager.id\\\">{{ manager.name }}</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label class=\\\"control-label col-sm-2\\\" >Project</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <select class=\\\"form-control\\\" formControlName=\\\"project_id\\\" (change)=\\\"getInfraTowers()\\\">\\n          <option *ngFor=\\\"let project of projects\\\" [value]=\\\"project._id\\\">{{project.name}}</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\" *ngIf=\\\"infraTowers.length > 0\\\">\\n      <label class=\\\"control-label col-sm-2\\\" >Infra Tower</label>\\n      <div class=\\\"col-sm-6\\\">\\n        <select class=\\\"form-control\\\" formControlName=\\\"infra_tower_id\\\">\\n          <option *ngFor=\\\"let infraTower of infraTowers\\\" [value]=\\\"infraTower._id\\\">{{infraTower.name}}\\n          </option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group\\\" *ngIf=\\\"isAdmin\\\">\\n      <label class=\\\"control-label col-sm-2\\\">Status&nbsp;&nbsp;&nbsp;<input type=\\\"checkbox\\\" formControlName=\\\"is_active\\\"></label>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <div class=\\\"col-sm-offset-2 col-sm-10\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </div>\\n    </div>\\n  </form>\\n  <table id=\\\"timeSheet\\\" class=\\\"table table-striped table-bordered table100\\\" *ngIf=\\\"isAdmin\\\">\\n    <thead>\\n      <tr>\\n        <td colspan=\\\"9\\\">\\n          <form [formGroup]=\\\"searchForm\\\" (ngSubmit)=\\\"onSearch()\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-sm-2\\\">\\n                <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"employee_id\\\"\\n                  placeholder=\\\"Enter Emp Id to search\\\"\\n                  [ngClass]=\\\"{ 'is-invalid': searchFormSubmitted && sf.employee_id.errors }\\\">\\n                <div *ngIf=\\\"searchFormSubmitted && !!sf.employee_id?.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"!!sf.employee_id?.errors.required\\\">Emp Id is required</div>\\n                </div>\\n              </div>\\n              <div class=\\\"col-sm-6\\\">\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Search</button>&nbsp;&nbsp;&nbsp;<button type=\\\"button\\\"\\n                  class=\\\"btn btn-default\\\" (click)=\\\"clearSearch()\\\">Clear Search Results</button>\\n              </div>\\n            </div>\\n          </form>\\n        </td>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr>\\n        <th>Employee ID</th>\\n        <th>Name</th>\\n        <th>Shore Type</th>\\n        <th>Role</th>\\n        <th>Manager</th>\\n        <th>Project</th>\\n        <th>Infra Tower</th>\\n        <th>Status</th>\\n        <th>Action</th>\\n      </tr>\\n      <tr *ngFor=\\\"let user of users  | paginate: { id: 'paginationControlsId',\\n      itemsPerPage: itemPerPageIndex,\\n      currentPage: currentPageIndex,\\n      totalItems: totalRecords }\\\">\\n        <td>{{user.employee_id}}</td>\\n        <td>{{user.name}}</td>\\n        <th>{{(user.shore_type === 0) ? 'Offshore': 'Onshore'}}</th>\\n        <td>{{user.role[0].name}}</td>\\n        <td>{{user.manager[0].name}}</td>\\n        <td>{{user.project[0].name}}</td>\\n        <td>{{(user.infra.length > 0) ? user.infra[0].name: 'N/A'}}</td>\\n        <td>{{ user.is_active == true ? 'Active' : 'Inactive' }}</td>\\n        <td><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)='updateUser(user)'>Update</button></td>\\n      </tr>\\n      <tr *ngIf=\\\"!users.length\\\">\\n        <td colspan=\\\"9\\\">\\n          No Records found.\\n        </td>\\n      </tr>\\n    </tbody>\\n    <tfoot *ngIf=\\\"users.length\\\">\\n      <tr>\\n        <td colspan=\\\"9\\\">\\n          <pagination-controls id=\\\"paginationControlsId\\\" (pageChange)=\\\"pageChanged($event)\\\" maxSize=\\\"9\\\"\\n            directionLinks=\\\"true\\\" autoHide=\\\"true\\\" responsive=\\\"true\\\" previousLabel=\\\"Previous\\\" nextLabel=\\\"Next\\\"\\n            screenReaderPaginationLabel=\\\"Pagination\\\" screenReaderPageLabel=\\\"page\\\">\\n          </pagination-controls>\\n        </td>\\n      </tr>\\n    </tfoot>\\n  </table>\\n</div>\"","import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { AppConst } from '../../utils/app-const';\nimport { Observable } from 'rxjs';\n\nimport { User } from '../models/user';\nimport { Role } from '../models/role';\n\n@Injectable()\nexport class RoleService {\n\n  constructor(private apiService: ApiService) { }\n\n  findAll(): Observable<Role> {\n    const findAll: string = AppConst.STORE_API_PATHS.ROLE;\n    return this.apiService.httpGet(findAll);\n  }\n\n  findAllByUser(params: String): Observable<User> {\n    const findAllByUser: string = (params !== null) ? AppConst.STORE_API_PATHS.USER + '?' + params : AppConst.STORE_API_PATHS.USER;\n    return this.apiService.httpGet(findAllByUser);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserComponent } from './users.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UserComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UserRoutingModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXJzL3VzZXJzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { routerTransition } from '../router.animations';\nimport { RoleService } from '../api/services/role.service';\nimport { UserService } from '../api/services/user.service';\nimport { AppConst } from '../utils/app-const';\nimport { ToastMessage } from '../utils/toast-message';\nimport { Role } from '../api/models/role';\nimport { User } from '../api/models/user';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ProjectService } from '../api/services/project.service';\nimport { InfraTowerService } from '../api/services/infra-tower.service';\nimport { Project } from '../api/models/project';\nimport { InfraTower } from '../api/models/infra-tower';\nimport { AppComponent } from '../app.component';\n\n@Component({\n  selector: 'app-role',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss'],\n  animations: [routerTransition()]\n})\nexport class UserComponent extends AppComponent implements OnInit {\n\n  public roles: Role[] = [];\n  public users: User[] = [];\n  public user: User;\n  public managers: User[] = [];\n  public serviceResponse: any;\n  public itemPerPageIndex: Number;\n  public currentPageIndex: Number = 1;\n  public totalRecords: Number = 0;\n  public updateForm: FormGroup;\n  public searchForm: FormGroup;\n  public isAdmin: Boolean = false;\n  public submitted: Boolean = false;\n  public searchFormSubmitted: Boolean;\n  public projects: Project[] = [];\n  public infraTowers: InfraTower[] = [];\n  public shoreTypes: any;\n\n  constructor(private formBuilder: FormBuilder,\n    private projectService: ProjectService,\n    private infraTowerService: InfraTowerService,\n    private roleService: RoleService,\n    private userService: UserService,\n    private toastMessage: ToastMessage) {\n      super(null);\n      this.isAdmin = this.isAdminValidate();\n  }\n\n  ngOnInit() {\n    if (this.isAdmin) {\n      this.getRoles();\n      this.getUserRoles('page=' + this.currentPageIndex);\n      this.searchFormInit();\n      this.getProjects();\n      this.findAllManagers();\n    } else {\n      this.getUserById();\n    }\n    this.updateFormInit();\n    this.shoreTypes = AppConst.SHORE_TYPE;\n  }\n\n  updateFormInit() {\n    this.updateForm = this.formBuilder.group({\n      employee_id: [''],\t\n      name: ['', Validators.required],\n      shore_type: ['', Validators.required],\n      manager_id: ['', Validators.required],\n      project_id: ['', Validators.required],\n      infra_tower_id: [''],\n      role_id: [''],\n      is_active: ['']\n    });\n  }\n\n  searchFormInit() {\n    this.searchForm = this.formBuilder.group({\n      employee_id: ['', Validators.required]\n    });\n  }\n\n  get f() {\n    return this.updateForm.controls;\n  }\n\n  get sf() {\n    return this.searchForm.controls;\n  }\n\n  getRoles() {\n    this.roleService.findAll()\n      .subscribe(data => {\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.roles = this.serviceResponse.data;\n          this.updateForm.controls['role_id'].setValue(this.roles[0]._id);\n        }\n      });\n  }\n\n  getUserRoles(params: String) {\n    this.roleService.findAllByUser(params)\n      .subscribe(data => {\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.users = this.serviceResponse.data;\n          this.totalRecords = this.serviceResponse.metadata.totalRecords;\n          this.itemPerPageIndex = this.serviceResponse.metadata.limit;\n        }\n      });\n  }\n\n  findAllManagers() {\n    this.userService.findAllManagers()\n      .subscribe(data => {\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.managers = this.serviceResponse.data;\n          if (!this.isAdmin) {\n            this.updateForm.controls['manager_id'].setValue(this.user.manager_id);\n          } else {  \n            this.updateForm.controls['manager_id'].setValue(this.managers[0].id);\n          }\n        }\n      });\n  }\n\n  getProjects() {\n    this.projectService.findList()\n      .subscribe(data => {\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.projects = this.serviceResponse.data;\n          if (this.projects.length) {\n            if (!this.isAdmin) {\n              this.updateForm.controls['project_id'].setValue(this.user.project_id);\n            } else {\n              this.updateForm.controls['project_id'].setValue(this.projects[0]._id);\n              this.updateForm.controls['shore_type'].setValue(0);\n            }\n            this.getInfraTowers();\n          }\n        }\n      });\n  }\n\n  getInfraTowers() {\n    this.infraTowerService.findList(this.querParams({ project_id: this.updateForm.value.project_id }))\n      .subscribe(data => {\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.infraTowers = this.serviceResponse.data;\n          if (this.infraTowers.length) {\n            if (!this.isAdmin) {\n              this.updateForm.controls['infra_tower_id'].setValue(this.user.infra_tower_id);\n            } else {\n              this.updateForm.controls['infra_tower_id'].setValue(this.infraTowers[0]._id);\n            }\n          } else {\n            this.updateForm.controls['infra_tower_id'].setValue('');\n          }\n        }\n      });\n  }\n\n  getUserById() {\n    this.userService.findById()\n      .subscribe(data => {\n        this.serviceResponse = data;\n        this.user = this.serviceResponse.data;\n        this.updateForm.controls['name'].setValue(this.user.name);\n        this.updateForm.controls['shore_type'].setValue(this.user.shore_type);\n        this.getProjects();\n        this.findAllManagers();\n      });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.updateForm.invalid) {\n      return;\n    }\n    this.userService.update(this.updateForm)\n      .subscribe(data => {\n        this.submitted = false;\n        this.serviceResponse = data;\n        if (this.serviceResponse.status === AppConst.SERVICE_STATUS.SUCCESS) {\n          this.toastMessage.success(null, this.serviceResponse.statusMessage);\n          if (this.isAdmin) {\n            this.ngOnInit();\n          }\n        } else {\n          this.toastMessage.error(null, this.serviceResponse.statusMessage);\n        }\n      });\n  }\n\n  onSearch() {\n    this.searchFormSubmitted = true;\n    if (this.searchForm.invalid) {\n      return;\n    }\n    this.currentPageIndex = 1;\n    this.getUserRoles(this.getSearchedData());\n  }\n\n  pageChanged(pageNo: any) {\n    this.currentPageIndex = pageNo;\n    this.getUserRoles(this.getSearchedData());\n  }\n\n  getSearchedData() {\n    const employee_id = (this.searchForm.value.employee_id !== '') ? (this.querParams(this.searchForm.value) + '&') : '';\n    return employee_id + 'page=' + this.currentPageIndex;\n  }\n\n  querParams(object: Object): String {\n    return Object.entries(object).map(([key, val]) => `${key}=${val}`).join('&');\n  }\n\n  clearSearch() {\n    this.searchFormSubmitted = false;\n    this.getUserRoles(null);\n    this.searchFormInit();\n  }\n\n  updateUser(user: User) {\n    this.updateForm.controls['employee_id'].setValue(user.employee_id);\n    this.updateForm.controls['name'].setValue(user.name);\n    this.updateForm.controls['shore_type'].setValue(user.shore_type);\n    this.updateForm.controls['role_id'].setValue(user.role_id);\n    this.updateForm.controls['manager_id'].setValue(user.manager_id);\n    this.updateForm.controls['is_active'].setValue(user.is_active);\n    window.scroll(0, 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserRoutingModule } from './users-routing.module';\nimport { UserComponent } from './users.component';\nimport { PageHeaderModule } from '../shared';\nimport { RoleService } from '../api/services/role.service';\nimport { UserService } from '../api/services/user.service';\nimport { ToastMessage } from '../utils/toast-message';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BooleanTransformModule } from '../shared/pipes/boolean-transform.module';\nimport { ProjectService } from '../api/services/project.service';\nimport { InfraTowerService } from '../api/services/infra-tower.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UserRoutingModule,\n    PageHeaderModule,\n    NgxPaginationModule,\n    ReactiveFormsModule,\n    BooleanTransformModule\n  ],\n  declarations: [\n    UserComponent\n  ],\n  providers: [\n    RoleService,\n    UserService,\n    ToastMessage,\n    ProjectService,\n    InfraTowerService\n  ]\n})\nexport class UserModule { }\n"],"sourceRoot":""}